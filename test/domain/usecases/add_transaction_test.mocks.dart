// Mocks generated by Mockito 5.4.6 from annotations
// in argentveloppes/test/domain/usecases/add_transaction_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:argentveloppes/domain/entities/category.dart' as _i6;
import 'package:argentveloppes/domain/entities/envelope.dart' as _i4;
import 'package:argentveloppes/domain/entities/transaction.dart' as _i5;
import 'package:argentveloppes/domain/repositories/budget_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [BudgetRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBudgetRepository extends _i1.Mock implements _i2.BudgetRepository {
  MockBudgetRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Envelope>> getAllEnvelopes() =>
      (super.noSuchMethod(
            Invocation.method(#getAllEnvelopes, []),
            returnValue: _i3.Future<List<_i4.Envelope>>.value(<_i4.Envelope>[]),
          )
          as _i3.Future<List<_i4.Envelope>>);

  @override
  _i3.Future<void> createEnvelope(_i4.Envelope? envelope) =>
      (super.noSuchMethod(
            Invocation.method(#createEnvelope, [envelope]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteEnvelope(String? envelopeId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteEnvelope, [envelopeId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i5.Transaction>> getTransactionsByEnvelope(
    String? envelopeId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getTransactionsByEnvelope, [envelopeId]),
            returnValue: _i3.Future<List<_i5.Transaction>>.value(
              <_i5.Transaction>[],
            ),
          )
          as _i3.Future<List<_i5.Transaction>>);

  @override
  _i3.Future<void> addTransaction(_i5.Transaction? transaction) =>
      (super.noSuchMethod(
            Invocation.method(#addTransaction, [transaction]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i6.Category>> getCategories() =>
      (super.noSuchMethod(
            Invocation.method(#getCategories, []),
            returnValue: _i3.Future<List<_i6.Category>>.value(<_i6.Category>[]),
          )
          as _i3.Future<List<_i6.Category>>);

  @override
  _i3.Future<void> createCategory(_i6.Category? category) =>
      (super.noSuchMethod(
            Invocation.method(#createCategory, [category]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteCategory(String? categoryId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCategory, [categoryId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> exportAsCsv() =>
      (super.noSuchMethod(
            Invocation.method(#exportAsCsv, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> importFromCsv(String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#importFromCsv, [filePath]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> backupToJson() =>
      (super.noSuchMethod(
            Invocation.method(#backupToJson, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> restoreFromJson(String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#restoreFromJson, [filePath]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> clearAllData() =>
      (super.noSuchMethod(
            Invocation.method(#clearAllData, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
