// Mocks generated by Mockito 5.4.6 from annotations
// in argentveloppes/test/data/repositories/budget_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:argentveloppes/data/datasources/local_storage_datasource.dart'
    as _i2;
import 'package:argentveloppes/data/models/category_model.dart' as _i6;
import 'package:argentveloppes/data/models/envelope_model.dart' as _i4;
import 'package:argentveloppes/data/models/transaction_model.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LocalStorageDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorageDataSource extends _i1.Mock
    implements _i2.LocalStorageDataSource {
  MockLocalStorageDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.EnvelopeModel>> getEnvelopes() =>
      (super.noSuchMethod(
            Invocation.method(#getEnvelopes, []),
            returnValue: _i3.Future<List<_i4.EnvelopeModel>>.value(
              <_i4.EnvelopeModel>[],
            ),
          )
          as _i3.Future<List<_i4.EnvelopeModel>>);

  @override
  _i3.Future<void> saveEnvelopes(List<_i4.EnvelopeModel>? envelopes) =>
      (super.noSuchMethod(
            Invocation.method(#saveEnvelopes, [envelopes]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i5.TransactionModel>> getTransactions() =>
      (super.noSuchMethod(
            Invocation.method(#getTransactions, []),
            returnValue: _i3.Future<List<_i5.TransactionModel>>.value(
              <_i5.TransactionModel>[],
            ),
          )
          as _i3.Future<List<_i5.TransactionModel>>);

  @override
  _i3.Future<void> saveTransactions(List<_i5.TransactionModel>? transactions) =>
      (super.noSuchMethod(
            Invocation.method(#saveTransactions, [transactions]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i6.CategoryModel>> getCategories() =>
      (super.noSuchMethod(
            Invocation.method(#getCategories, []),
            returnValue: _i3.Future<List<_i6.CategoryModel>>.value(
              <_i6.CategoryModel>[],
            ),
          )
          as _i3.Future<List<_i6.CategoryModel>>);

  @override
  _i3.Future<void> saveCategories(List<_i6.CategoryModel>? categories) =>
      (super.noSuchMethod(
            Invocation.method(#saveCategories, [categories]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> clearAllData() =>
      (super.noSuchMethod(
            Invocation.method(#clearAllData, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
