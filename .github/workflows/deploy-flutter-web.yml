name: Deploy Flutter Web App

# Définition du déclencheur - exécution du workflow lors d'un push sur la branche main
on:
  push:
    branches: [ main, gh-pages ]
  # Permet de lancer manuellement le workflow depuis l'interface GitHub
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Étape 1: Récupérer le code source
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2: Configurer Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.9.x'
          channel: 'beta'

      # Étape 3: Afficher la version de Flutter pour le débogage
      - name: Flutter version
        run: flutter --version

      # Étape 4: Installer les dépendances
      - name: Install dependencies
        run: flutter pub get

      # Étape 5: Analyser le code pour détecter les problèmes
      - name: Analyze code
        run: flutter analyze --no-fatal-infos

      # Étape 6: Exécuter les tests
      - name: Run tests
        run: flutter test      # Étape 7: Configurer les variables d'environnement Firebase
      - name: Setup Firebase Environment Variables
        env:
          FIREBASE_WEB_API_KEY: ${{ secrets.FIREBASE_WEB_API_KEY }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_WEB_APP_ID: ${{ secrets.FIREBASE_WEB_APP_ID }}
        run: |
          # Remplacer les valeurs fictives dans firebase_options.dart
          if [ -n "$FIREBASE_WEB_API_KEY" ]; then
            sed -i "s/apiKey: 'YOUR_WEB_API_KEY'/apiKey: '$FIREBASE_WEB_API_KEY'/g" lib/firebase_options.dart
            sed -i "s/projectId: 'YOUR_PROJECT_ID'/projectId: '$FIREBASE_PROJECT_ID'/g" lib/firebase_options.dart
            sed -i "s/authDomain: 'YOUR_AUTH_DOMAIN'/authDomain: '$FIREBASE_AUTH_DOMAIN'/g" lib/firebase_options.dart
            sed -i "s/storageBucket: 'YOUR_STORAGE_BUCKET'/storageBucket: '$FIREBASE_STORAGE_BUCKET'/g" lib/firebase_options.dart
            sed -i "s/messagingSenderId: 'YOUR_WEB_MESSAGING_SENDER_ID'/messagingSenderId: '$FIREBASE_MESSAGING_SENDER_ID'/g" lib/firebase_options.dart
            sed -i "s/appId: 'YOUR_WEB_APP_ID'/appId: '$FIREBASE_WEB_APP_ID'/g" lib/firebase_options.dart
            echo "Firebase configuration updated in lib/firebase_options.dart"
          else
            echo "WARNING: Firebase configuration secrets not set. Using placeholder values."
          fi

      # Étape 8: Compiler l'application pour le web
      - name: Build web
        run: flutter build web --release --web-renderer canvaskit --base-href "/ArgentEnveloppes/"
        # Étape 8: Ajouter le fichier .nojekyll pour désactiver Jekyll sur GitHub Pages
      - name: Add .nojekyll file
        run: touch build/web/.nojekyll      # Étape 8.1: Copier tous les fichiers statiques nécessaires dans le répertoire de build
      - name: Copy required static files to build directory
        run: |
          # Copier styles.css
          if [ -f "styles.css" ]; then
            cp styles.css build/web/
            echo "Copied existing styles.css to build/web/"
          else
            echo "/* Default styles for ArgentEnveloppes app */" > build/web/styles.css
            echo "Created default styles.css in build/web/"
          fi
          
          # Copier flutter_bootstrap.js
          if [ -f "flutter_bootstrap.js" ]; then
            cp flutter_bootstrap.js build/web/
            echo "Copied flutter_bootstrap.js to build/web/"
          else
            echo "WARNING: flutter_bootstrap.js not found!"
          fi
          
          # Copier script.js
          if [ -f "script.js" ]; then
            cp script.js build/web/
            echo "Copied script.js to build/web/"
          else
            echo "WARNING: script.js not found!"
          fi
          
          # Copier favicon.png
          if [ -f "favicon.png" ]; then
            cp favicon.png build/web/
            echo "Copied favicon.png to build/web/"
          else
            echo "WARNING: favicon.png not found!"
          fi
          
          # Créer le répertoire icons dans build/web s'il n'existe pas
          mkdir -p build/web/icons
          
          # Copier Icon-192.png
          if [ -f "icons/Icon-192.png" ]; then
            cp icons/Icon-192.png build/web/icons/
            echo "Copied Icon-192.png to build/web/icons/"
          else
            echo "WARNING: icons/Icon-192.png not found!"
          fi
          
          # Vérifier que tous les fichiers ont été copiés
          echo "Checking if all files were copied successfully:"
          for file in "styles.css" "flutter_bootstrap.js" "script.js" "favicon.png" "icons/Icon-192.png"; do
            if [ -f "build/web/$file" ]; then
              echo "✓ $file is present in build/web directory"
            else
              echo "✗ $file is missing in build/web directory!"
            fi
          done

      # Étape 9: Ajouter le fichier 404.html pour la gestion des routes
      - name: Create 404.html
        run: |
          cat > build/web/404.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="UTF-8">
            <meta http-equiv="refresh" content="0;url=/ArgentEnveloppes/">
            <script>
              window.location.href = '/ArgentEnveloppes/' + window.location.pathname.replace('/ArgentEnveloppes/', '');
            </script>
            <title>Page Redirect</title>
          </head>
          <body>
            Si vous n'êtes pas redirigé automatiquement, cliquez <a href="/ArgentEnveloppes/">ici</a>.
          </body>
          </html>
          EOF      # Étape 10: Mettre à jour le fichier index.html avec la configuration Firebase
      - name: Update index.html with Firebase configuration
        env:
          FIREBASE_WEB_API_KEY: ${{ secrets.FIREBASE_WEB_API_KEY }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_WEB_APP_ID: ${{ secrets.FIREBASE_WEB_APP_ID }}
        run: |
          if [ -n "$FIREBASE_WEB_API_KEY" ]; then
            # Créer un script temporaire pour remplacer la configuration Firebase
            cat > replace_config.js << EOF
            const fs = require('fs');
            const path = 'build/web/index.html';
            let content = fs.readFileSync(path, 'utf8');
            const config = {
              apiKey: "$FIREBASE_WEB_API_KEY",
              authDomain: "$FIREBASE_AUTH_DOMAIN",
              projectId: "$FIREBASE_PROJECT_ID",
              storageBucket: "$FIREBASE_STORAGE_BUCKET",
              messagingSenderId: "$FIREBASE_MESSAGING_SENDER_ID",
              appId: "$FIREBASE_WEB_APP_ID"
            };
            const configString = JSON.stringify(config, null, 6).replace(/"/g, "'").replace(/^{/, '').replace(/}$/, '');
            content = content.replace(/const firebaseConfig = \{[\s\S]*?\};/m, "const firebaseConfig = {" + configString + "};");
            fs.writeFileSync(path, content);
            console.log('Firebase config updated in index.html');
            EOF
            
            # Exécuter le script
            node replace_config.js
          else
            echo "WARNING: Firebase configuration secrets not set. Using placeholder values in index.html."
          fi

      # Étape 11: Déployer sur GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/web
          force_orphan: true  # Force la création d'une nouvelle branche orpheline (sans historique)
